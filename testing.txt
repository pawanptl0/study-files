
# 'create-react-app' adds jest and react-testing library default.

# Test suite has multiple test cases but maybe test cases dont need test suite.

# assertion: What we put into test case are assertions. eg. 'expect' in jest which either successful(green) or erroneous(red).

# if we are changing a file then jest runs all test again.

# What to not test?
Internal state, method, Lifecycle methods, child component implementation details of a component.

# Queries: ("get", "find", "query") are the methods that Testing Library gives you to find elements on the page.

# Types of Queries:
Single Element:
getBy...: Returns matching node otherwise error. it makes difficult to check for elements which shouldn't be there
queryBy...: returns matching node otherwise null. In order to assert elements which aren't there.
findBy...: returns Promise otherwise error. used for asynchronous elements which will be there eventually.

Multiple Element:
getAllBy...: returns array of matching nodes otherwise error.
queryAllBy...: returns array of matching nodes otherwise empty array.
findAllBy....: returns promise which resolves array of elements otherise error.


# Role: getByRole('button', {name: /submit/i}). use checked, selected etc instead of name. The getByRole function is usually used to retrieve elements by aria-label attributes. 

# LabelText:: mostly used for form fields to find elements using label text.

# PlaceholderText:

# Text: Outside of forms used to find non-interactive elements (like divs, spans, and paragraphs).

# DisplayValue: 

# AltText:

# Title:

# TestId: only recommended for cases where we can't see,  can't match by role or text or it doesn't make sense (e.g. the text is dynamic).

# screen: DOM Testing Library exports a 'screen' object which has every query that is pre-bound to 'document.body'. used to access Virtual DOM. 

# Actions:
fireEvent(node: HTMLElement, event: Event): Event like ''
fireEvent[eventName]: eventName may be 'change', 'click', ...
fireEvent.change(getByLabelText(/username/i), {target: {value: 'a'}})

import {render, screen} from '@testing-library/react'

render(<label htmlFor="example">Example</label>)
const exampleInput = screen.getByLabelText('Example')
screen.getByText('Example') // full string match
screen.getByText(/Example/i) // substring match, ignore case
screen.getByText((content, element) => content.startsWith('Example')) // Matching with a custom function


# render():creates a Virtual DOM for argument passed to it.
render() options:
const {container, unmount, rerender, debug, asFragment, ...} = render(<TableBody {...props} />)

render() result:
const {getByLabelText, queryAllByTestId, ...} = render(<Component />)

import {cleanup, render, fireEvent, renderHook} from '@testing-library/react'
test.afterEach(cleanup)

describe('my function or component', () => {
  test('does the following', () => {

  });
});

Whereas the describe-block is the test suite, the test-block (which also can be named 'it' instead of test) is the test case. 

# React Testing Library: RTL's render function takes any JSX to render it. It offers you different search functions to grab elements by using screen object. The selected element can then be used for user interactions or assertions.

# toBeInTheDocument(): checks whether the element is in the DOM.  

# Assertive Functions: Assertive functions happen on the right hand-side of your assertion.

# toBeNull and toBeInTheDocument. Both are primarily used in React Testing Library to check whether an element is present or not.

# We can use RTL's fireEvent function to simulate interactions of an end user.

# User Event: React Testing Library comes with an extended user event library which builds up on top of the fireEvent API.

# 'logRoles' : It displays actual container of that element for debuge purpose.


## Assertions:
It determines whether test pass or fail.
expect(ele).toBeInTheDocument()
expect: It is a jest global which starts the assertion.
ele: subject of the assertion.
toBeInTheDocument: Its a matcher 

# More Assertion Examples:
expect(ele.textContent).toBe('Hello'); // text should be 'Hello';
expect(eleArray).toHaveLength(7); // Array has length 7

## Jest watch mode.
watch for changes in file. 
no change, no test.
run test only this file if change.

Exit from watch mode use key 'q'.
# If there is no error then test will pass. even test is empty it will pass.

## Test Driven Development(TDD) OR 'red-green'.
STEPS:
write empty function.
write test.
test fails.
write code.
test pass.

// Run test only on selected components.
type 'p' and that file name. then it only runs test on that file.

suppose we have multiple tests in a file and we want to run single test then add 'test.only('test test',() =>{})' and revers run multiple tests and skip one test then add 'test.skip'

waitFor: when working with async code we didnt get data immediatly so many test are failed. wrap that condition in 'await waitFor( async() =>{that await condition})'

user.clear(inputElement) //to clear the input element.
user.type(inputElement, '1') // enter the value '1' into input element.


// suppose we are using an context which has provider. we can pass this provider to render method as 2nd parameter.
import ContestProvider ....
render(<App />, { Wrapper: ContestProvider})

OR

// we have to create a separate file.


// we can test overall app in single test also.

// Debug Tips
# screen.debug()
# import { logRoles } from '@testing-library/dom'

## callback Handlers:
use jest.fn() for that callback function.
eg.const onChange() = jest.fn();


# What to test.
Test Component renders.
Test Component renders with props.
Test component renders in different states.
Test component reacts to events.

# what not to test.
Implementation details.
Third party code.
code that is not important from a user point of view.

If we have multiple elements with the same role then add second parametr to getByRole('textbox',{name: 'email'});
for the headings we can provide level instead of name like for h1 is getByRole('heading',{level: 1}) and for h2 is {level:2}

































