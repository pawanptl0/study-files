
React
-----------------------------------------
SPA - server only sends single HTML page. thereafter react takes over and controls the UI.
User clicks on different links it seems that it request to new page to the server. 
but its not happen the UI is handled by  react and it decide which component to display and not.
smoother UI, better user experience.

Rendering: It Divides into 2 phase.
		1. Render Phase: During Initial rendering React goes 'root' to 'leaf'. It converts JSX into JS Object using 'CreateElement'. Put into virtual DOM and send updates to commit phase.
		2. Commit Phase: Elements are Render into the DOM	
		
Re-rendering: It Divides into 2 phase.
		1. Render Phase: React checks 'flagged' component. It converts JSX into JS Object using 'CreateElement'. Compare updated element with previous rendered elemetns tree. send only update to commit phase. For the same value component will not re-render. 
		2. Commit Phase: Elements are Render into the DOM	
		
How to stop Unnecessary Renders: 
	1.Parent has a Child and When Parent renders, child also render but not commit. Can stop this unnessary rendering by using child as 'children' in Parent. Component change its state not its props.
	2. use childs memoized version.
	3. Parent has Object and we passing it to child then use memoized version of that Object and pass memoized version to child. Same for array.
	
Ways to cause Re-rendering: When component calls useState's setter or useReducer's dispatch function. When parent components Re-renders. 
	
All consumers that are descendants of a Provider will re-render whenever the Provider’s value prop changes.


current version of react: React 18.
changes in react 18.

import ReactDom from 'react-dom' //before 18
import ReactDom from 'react-dom/client' // in 18

ReactDom.render(<App />, document.getElementById('root')) //before 18

const root = ReactDom.createRoot(document.getElementById('root'))
root.render(<App />) // new in 18

# before 18 state update was done without concurrency means state update was done sequential.
# in 18 state update was done with concurrency means state update was done parallel.

# New concurrent API's
1. useTransition()  :It is hook use in functional component. It tells react that some state update ay be handled with lower priority. returs array with exactly 2 values [isPending, startTransition]

2. startTransition(): It is function for class based compoenent. It tells react that some state update ay be handled with lower priority. wrap state update in startTransition()
Ex. startTransition(() => setSelectedUser(user))

3. useDefferedValue(): It is a hook. tell react that older value should be displayed until a new(updated) value is ready. kind of similar to startTransition(). 
Ex. const defferedVal = useDefferedValue(value)
get and deffered(old) value until updated value availabel.

# New hooks
1. useSyncExternalStore()
2. useInsertionEffect()
3. useId()


# How we can change the value of props?
pass the props value to 'useState()' and change the value.

# onChange or update state functions are independent. If one function changes then other functions are not re-renders.

# safe way to update the state: using the callback function which has 'prevState' value.

# can we use context and redux in same application? yes.

# React context Potential Disadvantages: complex setup, complex management, performance

# To maintain state during page refresh which hook usefull: set data using 'useEffect' hook.

# React work flow: index.html => index.js => App.js.

# Two-way data binding: we send the input value to state and state to input using value attribute in same component.

# suppose we are trying to change the value using simple variable and simple js function.
The function will execute, get the value in console but not in DOM.
We need to tell react there is something change and certain components need to be evaluated that's why we need 'state'.
when we call state update function it sets the value and tells react to rerender component with this new value. 
its an async update.
We use 'const' so we dont want to set the value accidently using assignment operator.



# portals : overlays, modals are goes into portals.

# side efects: side effects should not be simple function because it causes infinite loop. so use useEffect. 

# What to add and What to not add as dependancies?
Don't need to add state updating funcions, built-in apis like fetch, localstorage, variables or function defined outside of the component.
Add function name as dependancy if we call that function inside 'useEffect' because whenever the function parameter changes the useEffect wil re-run.

# useEffect: use debouncing technique in useEffect. means no need to re-run useEffect each and every keystroke. we have to wait some milliseonds and rerun the effect.If we not provide empty array as dependancy then 'useEffect' runs on every render cycle.

# useReducer: for state management. reducer function is outside of the component function bcoz it doesnt need any data or interact with anything defined in component.

# useMemo: We can use this hook for Array or Object. Array and Object are non-primitive data types. Each render Array or Object are re-created because they are reference type and each time new reference is created.

# for security reason always connect to db with backend application.

Redux
--------------------------------------------------------------------------------------------------

# createStore() : create redux store.

# getState() : to get the snapshot of lates store.

# subscribe() : whenever the state changes this function automatically calls to provide latest state value.
we can create a function which has 'getState' is callback and pass this function as argument to 'subscribe()'.


React Reouter
------------------------------------------------

If we use <a> element instead of <Link> then page refresshes means it sends a new request each time.

<NavLink> sets the active classes on the element. we have to add 'activeClassName' prop.
<NavLink activeClassName="active" to="/home">Home</NavLink>

# 
<Route path="/">
<Redirect to='/'>
</Route>

# We have { Prompt} component from 'react-router-dom'
It shows data when we leave the page.
<Prompt when={isActive} message={(location) => 'are you sure want to leave?'} />

# nested paths dont have to use forward slash because they are relative paths default.

# useLoaderData hook to load the data dynamically.  add 'loader' props in <route> which has function name as value. that function calls when the page is load and that function has fetch request.


Different Libraries
--------------------------------------------------------------------------------------
1. react-ga : for google analytics.
2. react-select : The Select control for React. for simplicity of our html <select> element. 
3. react-modal: our regular modal.
4. query-string : Parse and stringify URL query strings.
5. react-hook-form : Built with performance, UX and DX in mind. Embraces native HTML form validation
6. react-toastify : Made notification easy.


React hook form
------------------------------------------------------------------------------

React Hook Form is a tiny library without any dependencies.
The main purpose of hook form is for validation and performance.
We able to subscribe to individual input and form State update without re-rendering the entire form.
Minimizes the number of re-renders. 
minimizes validate computation.
faster mounting.
consistent validation strategies.

Example:
import { useForm, Controller } from "react-hook-form";

export default function App() {
  const { register, handleSubmit, watch, formState: { errors } } = useForm();
  
  const onSubmit = data => console.log(data);

  console.log(watch("fName")); 

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <input defaultValue="test" {...register("fName")} />
      {fName}
      {errors.fName && <span>{error.fName?.message}</span>}
      
      <input {...register("username", { required: true, min:{value:3, message:'Need at least 3' })} 
      aria-invalid={errors.firstName ? "true" : "false"} />
      {errors.username && <span>This field is required</span>}
      
      <input type="submit" />
    </form>
  );
}

useForm(): It returns register, handleSubmit, watch, formState: { errors }. 
We can provide default values to useForm( defaultValues:{ fName: 'Pawan', lName:'Patil' }).

register(): register your input into the hook by invoking this function. 
It ensures the value available for both the form validation and submission.

handleSubmit(onSubmit): will validate your inputs before invoking "onSubmit".

errors: errors will return when field validation fails.

watch(): It watch input value by passing the name of it. we can subscribe to each input through this API. 
If we dont provide any parameter to watch then it shows entire form input value.

If we want to integrate with existing form then use 'ref' and assign relevant props to input.
ref={register({min:{ value: 3, message: 'Min 3 required'}})}.

If we want to integrate with external UI component libraries use 'Controller' component.

import { Input } from '@matrial/ui'
<Controller name="firstName" control={control} render={({ field }) => <Input {...field} />} />

# We can also pass the external schema validation to useForm.
      
# React Hook Form is built with TypeScript, and you can define a FormData type to support form values. 
      
type FormData = {
  firstName: string;
  lastName: string;
};

const { register, setValue, handleSubmit, formState: { errors } } = useForm<FormData>();





 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 


